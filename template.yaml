AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  TagKeyParam:
    Type: String
    Description: Cost allocation tag to breakup report by

  OutputBucketParam:
    Type: String
    Description: S3 bucket to use for reports generated (must not exist already)

  AthenaDBParam:
    Type: String
    Default: aws_billing_report
    Description: Athena database with CUR

  AthenaTableParam:
    Type: String
    Default: my_cur_report
    Description: Athena table with CUR

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: cloudwatch_logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
        - PolicyName: athena
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - athena:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:CreateTable
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                Resource: '*'

  GetTagsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TAG_KEY: !Ref TagKeyParam
          ATHENA_DB: !Ref AthenaDBParam
          ATHENA_TABLE: !Ref AthenaTableParam
          OUTPUT_BUCKET: !Ref OutputBucketParam
      Code:
        ZipFile: |
          import boto3
          import os
          import re
          
          def handler(event, context):

              # Pull relevant env
              tag_key = os.environ['TAG_KEY']
              db = os.environ['ATHENA_DB']
              table = os.environ['ATHENA_TABLE']
              bucket = os.environ['OUTPUT_BUCKET']
          
              # Get key
              manifest_key = event['Records'][0]['s3']['object']['key']
              manifest_bucket = event['Records'][0]['s3']['bucket']['name']
              
              # Init boto clients
              athena = boto3.client('athena')
              s3 = boto3.resource('s3')
              
              # Read query file and get last line
              manifest_obj = s3.Object(manifest_bucket, manifest_key)
              raw_manifest_text = manifest_obj.get()['Body'].read().decode('utf-8')
              manifest_last_word = raw_manifest_text.split()[-1]
              
              # Get date information
              date_match = re.match(r'^[^:]*:year=(\d{4})/month=(\d{1,2})', manifest_last_word)
              if not date_match:
                  print('Error: Invalid manifest last word: {}'.format(manifest_last_word))
                  return False
              year, month = date_match.groups()
          
              # Init boto clients
              athena = boto3.client('athena')
          
              # Build query
              query = "SELECT DISTINCT resourcetags_user_{tag_key} FROM {table} WHERE resourcetags_user_{tag_key} != '';".format(**locals())
          
              response = athena.start_query_execution(
                  QueryString=query,
                  QueryExecutionContext={'Database': db,},
                  ResultConfiguration={'OutputLocation': 's3://{bucket}/tags/{year}/{month}'.format(**locals()),}
              )
          
              return True


  QueryAthenaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TAG_KEY: !Ref TagKeyParam
          ATHENA_DB: !Ref AthenaDBParam
          ATHENA_TABLE: !Ref AthenaTableParam
      Code:
        ZipFile: |
          import boto3
          import os
          
          def handler(event, context):
            
              # Pull relevant env
              tag_key = os.environ['TAG_KEY']
              db = os.environ['ATHENA_DB']
              table = os.environ['ATHENA_TABLE']
          
              # Get info from event
              key = event['Records'][0]['s3']['object']['key']
              year, month = key.split('/')[1:3]
              bucket = event['Records'][0]['s3']['bucket']['name']
          
              # Init boto clients
              athena = boto3.client('athena')
              s3 = boto3.resource('s3')
          
              # Read tags out of S3
              obj = s3.Object(bucket, key)
              raw_tag_list = obj.get()['Body'].read().decode('utf-8')
              tag_list = [t.strip('"') for t in raw_tag_list.split()[1:]]
          
              # Query for each tag and month
              for tag_value in tag_list:
          
                  # Build query
                  query = "SELECT * FROM {table} WHERE resourcetags_user_{tag_key}='{tag_value}' AND year='{year}' AND month='{month}';".format(**locals())
          
                  # Query athena
                  response = athena.start_query_execution(
                      QueryString=query,
                      QueryExecutionContext={'Database': db,},
                      ResultConfiguration={'OutputLocation': 's3://{bucket}/athena_out/{year}/{month}/{tag_value}'.format(**locals()),}
                  )
          
              return True
 
  CopyFinalCSVFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TAG_KEY: !Ref TagKeyParam
          ATHENA_DB: !Ref AthenaDBParam
          ATHENA_TABLE: !Ref AthenaTableParam
      Code:
        ZipFile: |
          import boto3
          import os
          
          def handler(event, context):
            
              # Pull relevant env
              tag_key = os.environ['TAG_KEY']
              db = os.environ['ATHENA_DB']
              table = os.environ['ATHENA_TABLE']
          
              # Get info from event
              key = event['Records'][0]['s3']['object']['key']
              print(key)
              year, month, tag_value = key.split('/')[1:4]
              bucket = event['Records'][0]['s3']['bucket']['name']
          
              # Init boto clients
              s3 = boto3.client('s3')
          
              # Move file
              s3.copy_object(
                  Bucket=bucket,
                  CopySource='{bucket}/{key}'.format(**locals()),
                  Key='reports/{tag_value}/{year}-{month}-cur.csv'.format(**locals())
              )
          
              return True 

  QueryAthenaS3Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt QueryAthenaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub arn:aws:s3:::${OutputBucketParam}

  CopyFinalCSVPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt CopyFinalCSVFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub arn:aws:s3:::${OutputBucketParam}

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref OutputBucketParam
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt QueryAthenaFunction.Arn
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: tags/
                  - Name: suffix
                    Value: .csv
          - Function: !GetAtt CopyFinalCSVFunction.Arn
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: athena_out/
                  - Name: suffix
                    Value: .csv
    DependsOn:
      - QueryAthenaS3Permission
      - CopyFinalCSVPermission

Outputs:
  GetTagsFunctionArn:
    Value: !GetAtt GetTagsFunction.Arn
    Description: Lambda function to by triggered by Athena CUR bucket
  ReportBucket:
    Value: !Ref OutputBucketParam
    Description: Bucket reports are being saved to
